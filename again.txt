scripts : 
preview 
build 
test 
eject 

npm run {name of the script} here start
never include node modules folder so do npm install

components
using jsx and babble 

dynamic values in the template
{} meaning dynamic values converts to string everything except objects and booleans 
{} meaning any valid javascript in betweeen also valid 
a href = {link}

multiple components 
components tree
rafce

another component Home

using css
it adds all the styles to really scope and gives the styles to all the componenets present in the browser at that point of time
at smaller projects index.css files is the only file done ali
align items center to vertical and not horizontal

for jsx inline styling : style = {dynamic value {style object & camelcase all of the styles}}

click events 
handleClick inside the home only 
onclick = {handleClick} and not {handleClick()} as it runs and invokes the functions
 so onClick(()=>{handleClick(name)})

onClick{(e) => handleClickAgain('mario',e)}

const handleClickAgain = (name) =>{
console.log('hello' + name);
}

outputting lists:
const [blogs,setBlogs] = useState([
aldskfa;flkja
there are objects a lot of 
{title:'My new Website', body: 'lorem  ipsum' , author :'mario', id:1}
]);
but we dont hardcode it as it might change also 

so we use map method
{blogs.map((blog)=>(
	className = 'blog-preview' key={blog.id}
    <h2>{blog.title}</h2>
    <p> Written by {blog.author}
  ))} 

creating an external componenet of blogs
but blogs is not defined 
so either redeclare all the data in the components 
or use props 

props data from one parent component to the child component
 we can destructure the props directly as
Const Blogs = ({blogs, title}) =>{

}
insted of Const Blogs = (props) =>{
    blogs = props.blogs;
    title = props.title;
}

<BlogList blogs = {blogs.filter((blog)=> blog.author === 'mario')}
so it shows the blogs of mario 

function as props
we had to delete the blog so we sent the handleDelete function into the other componeent and defined the main function in the 
root function and passed the function as a prop in the other componnent 

filter doesnot change the original data but returns another array that is filtered
const handleDelete = (id) =>{
    const newBlogs = blogs.filter(blog=>blog.id != id);
    setBlogs(newBlogs);
}
but it refreshes as we refresh 

useEffect hook 
run the code on every render first import it 
useEffect(()=>{
    console.log('use effect ran');
    console.log(blogs);
});

prevent changing state in useEffect or infinite loop 

using json server
in the root directory 
a file db.json
npx json-server --watch data/db.json --port 8000
the main id has the name of toplevel property as a resource 

fetching data with useEffect

set the initial value fo useState as null 
useEffect(()=>{
    fetch('sldkfsl')
    .then(res =>{
        return res.json()
    })
    .then((data)=>{
        console.log(data)
        it has the data with the data 
        so it setBlogs(data);
    })
},[])

